package controller;

import gui.ActorViewHelper;
import gui.MainWindow;
import gui.MovieViewHelper;
import io.InOutException;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import model.AlreadyFavorite;
import model.AlreadyRated;
import model.Movie;
import model.RatingOutOfBound;

/**
 * Class for listening for events generated by the view and
 * executing the necessary operations on the model through the {@link Controller} class.
 * 
 * @author Tibor SalagvÃ¡rdi
 */
public class GuiEventListener
{
	private MainWindow view;
	private Controller programModel;

	private static Logger logger = LoggerFactory.getLogger(GuiEventListener.class);
	public GuiEventListener(MainWindow view, Controller state)
	{
		this.view = view;
		this.programModel = state;
		
		view.addSearchListenerForFavorites(new SearchInFavoritesListener());
		view.addSearchListenerForPublicDB(new SearchInDBListener());
		view.addShowAllFavoritesListener(new ShowAllFavorites());
		view.addMovieSelectionListener(new MovieSelectListener(view.getMovieTable(), view.getActorTable()));
		view.addActorSelectionListener(new ActorSelectListener(view.getMovieTable(), view.getActorTable()));
		view.addFavMovieSelectionListener(new MovieSelectListener(view.getFavMovieTable(), view.getFavActorTable()));

		view.addMovieRateListener(new MovieRateListener(view.getMovieTable(),programModel.getMovies()));
		view.addFavMovieRateListener(new MovieRateListener(view.getFavMovieTable(), programModel.getFavorites()));
		view.addRemoveListener(new RemoveListener());
		view.addSaveListener(new SaveListener());
		view.addTabListener(new TabListener());

	}

	public class SearchInDBListener implements ActionListener
	{
		public void actionPerformed(ActionEvent arg0)
		{
			logger.debug("Trying to search in database...");
			if (view.getDataToSearchFor() == MainWindow.LOOKING_FOR_ACTOR)
			{
				try {
					programModel.loadActorsByName(view.getNameInPublicDB());
				} catch (InOutException e) {
					logger.error(e.getMessage());
					view.showError(e.getMessage());
				}
				view.updateActorTable();
				view.updateFavActorTable();
			}
			else
			{
				try {
					programModel.loadMoviesByTitle(view.getNameInPublicDB());
				} catch (InOutException e) {
					logger.error(e.getMessage());
					view.showError(e.getMessage());
				}
				view.updateMovieTable();
			}
		}
	}
	public class SearchInFavoritesListener implements ActionListener
	{
		public void actionPerformed(ActionEvent arg0)
		{
			logger.debug("Seaching in favorites...");
			programModel.filterFavorites(view.getNameInFavorites());
			view.updateFavMovieTable();
		}
	}
	public class ShowAllFavorites implements ActionListener
	{
		public void actionPerformed(ActionEvent arg0)
		{
			programModel.loadAllFavorites();
			view.updateFavMovieTable();
		}
	}
	public class MovieSelectListener implements ListSelectionListener
	{
		private JTable movieTable;
		private JTable actorTable;

		public MovieSelectListener(JTable movieTable, JTable actorTable)
		{
			this.movieTable = movieTable;
			this.actorTable = actorTable;
		}

		public void valueChanged(ListSelectionEvent e)
		{
			if(!e.getValueIsAdjusting())
			{
				try {
					if (movieTable.getSelectedRow() > -1)
					{
						logger.debug("Selected {}. row in {}.",movieTable.getSelectedRow(),movieTable);
						MovieViewHelper mvh = (MovieViewHelper) movieTable.getModel();
						int index = movieTable.convertRowIndexToModel(movieTable.getSelectedRow());
						programModel.loadActorsByMovie(mvh.getValueAt(index));
						AbstractTableModel ATM = (AbstractTableModel) actorTable.getModel();
						ATM.fireTableDataChanged();
					}
				} catch (InOutException e1) {
					logger.error(e1.getMessage());
					view.showError(e1.getMessage());
				}
			}

		}

	}

	public class ActorSelectListener implements ListSelectionListener
	{
		private JTable movieTable;
		private JTable actorTable;

		public ActorSelectListener(JTable movieTable, JTable actorTable)
		{
			this.movieTable = movieTable;
			this.actorTable = actorTable;
		}

		public void valueChanged(ListSelectionEvent e)
		{
			if(!e.getValueIsAdjusting())
			{
				try {
					if (view.getActorTable().getSelectedRow() > -1)
					{
						logger.debug("Selected {}. row in {}.",actorTable.getSelectedRow(),actorTable);
						ActorViewHelper avh = (ActorViewHelper) actorTable.getModel();
						int index = actorTable.convertRowIndexToModel(actorTable.getSelectedRow());
						programModel.loadMoviesByActor(avh.getValueAt(index));
						AbstractTableModel ATM = (AbstractTableModel) movieTable.getModel();
						ATM.fireTableDataChanged();
					}
				} catch (InOutException e1) {
					logger.error(e1.getMessage());
					view.showError(e1.getMessage());
				}
			}
			
		}
	}

	public class MovieRateListener implements ActionListener
	{
		JTable movTable;
		List<Movie> movies;

		public MovieRateListener(JTable movTable, List<Movie> movies)
		{
			this.movies = movies;
			this.movTable = movTable;
		}

		public void actionPerformed(ActionEvent arg0)
		{
			logger.debug("Trying to rate movie...");
			if (movTable.getSelectedRowCount() == 1)
			{
				int state = view.rateDialog();
				double userRating = 0;
				if (state == JOptionPane.OK_OPTION)
				{
					try{
						userRating = Double.parseDouble(view.getRating());
					}catch (NumberFormatException e){
						view.showError("Invalid input!");
						logger.error(e.getMessage());
					}
					try{
						MovieViewHelper MVH = (MovieViewHelper)movTable.getModel();
						Movie mov=MVH.getValueAt(movTable.convertRowIndexToModel(movTable.getSelectedRow()));
						programModel.rateMovie(mov,userRating);
					}
					catch (RatingOutOfBound e){
						logger.error(e.getMessage());
						view.showError(e.getMessage());
					}
					catch (InOutException e){
						logger.error(e.getMessage());
						view.showError(e.getMessage());
					}catch (AlreadyRated e)
					{
						logger.error(e.getMessage());
						view.showError(e.getMessage());
					}
					view.updateMovieTable();
					view.updateFavMovieTable();
				}
			}
			else
			{
				view.showError("Exactly one movie should be selected!");
			}
		}
	}

	public class RemoveListener implements ActionListener
	{
		public void actionPerformed(ActionEvent e)
		{
			logger.debug("Trying to remove from favorites...");
			JTable favTable=view.getFavMovieTable();
			if (favTable.getSelectedRowCount() == 1)
			{
				try{
					MovieViewHelper MVH = (MovieViewHelper)favTable.getModel();
					programModel.removeFromFavorites(MVH.getValueAt(favTable.convertRowIndexToModel(favTable.getSelectedRow())));
				} catch (InOutException e1) {
					view.showError("Error while trying to remove the selected movie from your favorites.");
					logger.error(e1.getMessage());
					
				}
				view.updateFavMovieTable();
			}
			else
			{
				view.showError("Exactly one movie should be selected!");
			}

		}
	}

	public class SaveListener implements ActionListener
	{
		public void actionPerformed(ActionEvent e)
		{
			logger.debug("Trying to save movie as favorite...");
			if (view.getMovieTable().getSelectedRowCount() == 1)
			{
				try {
					MovieViewHelper MVH = (MovieViewHelper)view.getMovieTable().getModel();
					programModel.addMovieToFavorites(MVH.getValueAt(view.getMovieTable().convertRowIndexToModel(view.getMovieTable().getSelectedRow())));
				} catch (InOutException e1) {
					logger.error(e1.getMessage());
					view.showError(e1.getMessage());
				} catch (AlreadyFavorite e1) {
					logger.error(e1.getMessage());
					view.showError(e1.getMessage());
				}
				view.updateFavMovieTable();
			}
			else
			{
				view.showError("Exactly one movie should be selected!");
			}
		}
	}

	public class TabListener implements ChangeListener
	{

		public void stateChanged(ChangeEvent arg0)
		{
			view.getMovieTable().clearSelection();
			view.getActorTable().clearSelection();
			view.getFavMovieTable().clearSelection();
			view.getFavActorTable().clearSelection();
		}

	}
}
